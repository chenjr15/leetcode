class Solution {
private: 
    int idx1=0,idx2=0;
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int total_size = nums1.size() +nums2.size();
        int center =(total_size/2); 
        double median=0;
        if((total_size - 2*center)==0){
            // 少一次
            median = fastfoward(center-1,nums1,nums2);
            median = (median+fastfoward(1,nums1,nums2))/2;
        }else{
            // center次
            median = fastfoward(center,nums1,nums2);
        }
        
        
        return median;
    }
    int  fastfoward(int count,vector<int>& nums1, vector<int>& nums2){
        int len1=nums1.size();
        int len2 = nums2.size();
        while((count--) != 0){
            if(idx1<len1&& idx2<len2){
                if(nums1[idx1]<nums2[idx2]){
                    idx1++;
                }else{
                    idx2++;
                }
            }else{
                if (idx1<len1){
                    idx1++;
                }else{
                    idx2++;
                }
            }
        }
        int smaller = 0;
        // 返回快进指针指向的比较小的元素
        if(idx1<len1&& idx2<len2){
                if(nums1[idx1]<nums2[idx2]){
                    smaller = nums1[idx1]; 
                }else{
                    smaller = nums2[idx2]; 
                }
            }else{
                if (idx1<len1){
                    smaller = nums1[idx1]; 
                }else{
                    smaller = nums2[idx2]; 
                }
            }
        return smaller;
    }
};
